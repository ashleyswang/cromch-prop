extern func edge_fname(graph_name : string) -> output:string;

element Vertex end
element Edge end

const edges : edgeset{Edge}(Vertex,Vertex) = load(edge_fname(argv[1]));

const vertices : vertexset{Vertex} = edges.getVertices();

const parent : vector{Vertex}(int) = -1;
const nondeterministic : vector{Vertex}(bool) = false;

extern func read_nd_nodes(graph_name : string);

func updateEdge(src : Vertex, dst : Vertex)
  parent[dst] = src;
end

func toFilter(v : Vertex) -> output : bool
  output =  parent[v] == -1;
end

func ndFilter(v : Vertex) -> output : bool
  output = nondeterministic[v];
end

func printParent(v: Vertex)
  %if parent[v] > -1
  %    print v;
  %end
  if nondeterministic[v]
    print v;
  end
end

func main()
  read_nd_nodes(argv[1]);
  var frontier : vertexset{Vertex} = vertices.filter(ndFilter);

  while (frontier.getVertexSetSize() != 0)
    var output : vertexset{Vertex};
    #s1# output = edges.from(frontier).to(toFilter).applyModified(updateEdge, parent, true);
    delete frontier;
    frontier = output;
  end
  delete frontier;
    
  #s2# vertices.apply(printParent);
end
